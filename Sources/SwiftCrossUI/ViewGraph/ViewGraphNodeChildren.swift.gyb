%{
maximum_child_count = 10
}%

public protocol ViewGraphNodeChildren {
    var widgets: [AnyWidget] { get }
}

extension ViewGraphNodeChildren {
    /// Bundles the node's children into a single layout-transparent container (will take
    /// on the orientation of its parent).
    public func asSingleWidget<Backend: AppBackend>(backend: Backend) -> Backend.Widget {
        let widgets: [Backend.Widget] = widgets.map { $0.into() }
        let stack = backend.createPassthroughVStack(spacing: 0)
        for widget in widgets {
            backend.addChild(widget, toPassthroughVStack: stack)
        }
        return stack
    }

    public func widgets<Backend: AppBackend>(for backend: Backend) -> [Backend.Widget] {
        return widgets.map { $0.into() }
    }
}

public struct EmptyViewGraphNodeChildren: ViewGraphNodeChildren {
    public let widgets: [AnyWidget] = []

    public init() {}
}

% for i in range(10):
%{
children = []
for j in range(i + 1):
    children.append("Child%d" % j)

struct_type_parameters = ", ".join(["%s: View" % child for child in children])
variadic_type_parameters = ", ".join(children)
parent_type = "VariadicView%d<%s>" % (i + 1, variadic_type_parameters)
}%

public struct ViewGraphNodeChildren${i + 1}<${struct_type_parameters}>: ViewGraphNodeChildren {
    public var widgets: [AnyWidget] {
        return [
            % for child in children:
            ${child.lower()}.widget,
            % end
        ]
    }

    % for child in children:
    /// ``AnyViewGraphNode`` is used instead of ``ViewGraphNode`` because otherwise the backend leaks into views.
    public var ${child.lower()}: AnyViewGraphNode<${child}>
    % end

    public init<Backend: AppBackend>(
        % for child in children:
        _ ${child.lower()}: ${child},
        % end
        backend: Backend
    ) {
        % for child in children:
        self.${child.lower()} = AnyViewGraphNode(for: ${child.lower()}, backend: backend)
        % end
    }
}
% end
