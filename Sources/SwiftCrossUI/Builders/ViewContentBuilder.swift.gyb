%{
maximum_view_count = 10
}%

@resultBuilder
public struct ViewContentBuilder {
    public static func buildBlock() -> EmptyViewContent {
        return EmptyViewContent()
    }

% for i in range(maximum_view_count):

%{
type_parameters = ", ".join(["V%d: View" % j for j in range(i + 1)])
parameters = ", ".join(["_ view%d: V%d" % (j, j) for j in range(i + 1)])

return_type_parameters = ", ".join(["V%d" % j for j in range(i + 1)])
return_type = "ViewContent%d<%s>" % (i + 1, return_type_parameters)
return_type_init_parameters = ", ".join(["view%d" % j for j in range(i + 1)])
}%

    public static func buildBlock<${type_parameters}>(${parameters}) -> ${return_type} {
        return ${return_type}(${return_type_init_parameters})
    }
% end

    public static func buildEither<A: View, B: View>(first component: A) -> EitherView<A, B> {
        return EitherView(component)
    }

    public static func buildEither<A: View, B: View>(second component: B) -> EitherView<A, B> {
        return EitherView(component)
    }

    public static func buildIf<V: View>(_ content: V?) -> OptionalView<V> {
        return OptionalView(content)
    }

    public static func buildFinalResult<V: View, R: ViewContent>(_ component: V) -> R where V.Content == R {
        return component.body
    }
}
