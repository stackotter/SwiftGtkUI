%{
maximum_view_count = 10
}%

% for i in range(maximum_view_count):
%{
view = "VariadicView%d" % (i + 1)
struct_parameters = ", ".join(["View%d: View" % (j) for j in range(i + 1)])
properties = "\n    ".join(["public var view%d: View%d" % (j, j) for j in range(i + 1)])
init_parameters = ", ".join(["_ view%d: View%d" % (j, j) for j in range(i + 1)])
init_body = "\n        ".join(["self.view%d = view%d" % (j, j) for j in range(i + 1)])
children_type_parameters = ", ".join(["View%d" % j for j in range(i + 1)])
}%

/// A view with exactly ${i + 1} children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Will take on the orientation of its nearest 
public struct ${view}<${struct_parameters}>: TypeSafeView {
    public typealias Content = EmptyView
    public typealias State = EmptyState

    typealias Children = ViewGraphNodeChildren${i + 1}<${children_type_parameters}>

    ${properties}

    public var body = EmptyView()

    /// Wraps ${i + 1} child views in a single container view.
    public init(${init_parameters}) {
        ${init_body}
    }

    func children<Backend: AppBackend>(backend: Backend) -> Children {
        return Children(
            % for j in range(i + 1):
            view${j},
            % end
            backend: backend
        )
    }

    func updateChildren<Backend: AppBackend>(_ children: Children, backend: Backend) {
        % for j in range(i + 1):
        children.child${j}.update(with: view${j})
        % end
    }

    func asWidget<Backend: AppBackend>(_ children: Children, backend: Backend) -> Backend.Widget {
        let container = backend.createVStack(spacing: 0)
        backend.addChildren(children.widgets(for: backend), toVStack: container)
        return container
    }

    func update<Backend: AppBackend>(_ widget: Backend.Widget, children: Children, backend: Backend) {}    
}
