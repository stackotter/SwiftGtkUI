/// A view with exactly 1 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView1<View0: View>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren1<View0>

    public var view0: View0

    public var body = EmptyView()

    /// Wraps 1 child views in a single container view.
    public init(_ view0: View0) {
        self.view0 = view0
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 2 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView2<View0: View, View1: View>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren2<View0, View1>

    public var view0: View0
    public var view1: View1

    public var body = EmptyView()

    /// Wraps 2 child views in a single container view.
    public init(_ view0: View0, _ view1: View1) {
        self.view0 = view0
        self.view1 = view1
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 3 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView3<View0: View, View1: View, View2: View>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren3<View0, View1, View2>

    public var view0: View0
    public var view1: View1
    public var view2: View2

    public var body = EmptyView()

    /// Wraps 3 child views in a single container view.
    public init(_ view0: View0, _ view1: View1, _ view2: View2) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 4 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView4<View0: View, View1: View, View2: View, View3: View>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren4<View0, View1, View2, View3>

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3

    public var body = EmptyView()

    /// Wraps 4 child views in a single container view.
    public init(_ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 5 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView5<View0: View, View1: View, View2: View, View3: View, View4: View>:
    TypeSafeView, View
{
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren5<View0, View1, View2, View3, View4>

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3
    public var view4: View4

    public var body = EmptyView()

    /// Wraps 5 child views in a single container view.
    public init(_ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3, _ view4: View4) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
        self.view4 = view4
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            view4,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child4.update(
                        with: view4,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view4))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 6 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView6<
    View0: View, View1: View, View2: View, View3: View, View4: View, View5: View
>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren6<View0, View1, View2, View3, View4, View5>

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3
    public var view4: View4
    public var view5: View5

    public var body = EmptyView()

    /// Wraps 6 child views in a single container view.
    public init(
        _ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3, _ view4: View4,
        _ view5: View5
    ) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
        self.view4 = view4
        self.view5 = view5
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            view4,
            view5,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child4.update(
                        with: view4,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view4))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child5.update(
                        with: view5,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view5))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 7 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView7<
    View0: View, View1: View, View2: View, View3: View, View4: View, View5: View, View6: View
>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren7<View0, View1, View2, View3, View4, View5, View6>

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3
    public var view4: View4
    public var view5: View5
    public var view6: View6

    public var body = EmptyView()

    /// Wraps 7 child views in a single container view.
    public init(
        _ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3, _ view4: View4,
        _ view5: View5, _ view6: View6
    ) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
        self.view4 = view4
        self.view5 = view5
        self.view6 = view6
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            view4,
            view5,
            view6,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child4.update(
                        with: view4,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view4))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child5.update(
                        with: view5,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view5))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child6.update(
                        with: view6,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view6))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 8 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView8<
    View0: View, View1: View, View2: View, View3: View, View4: View, View5: View, View6: View,
    View7: View
>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren8<View0, View1, View2, View3, View4, View5, View6, View7>

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3
    public var view4: View4
    public var view5: View5
    public var view6: View6
    public var view7: View7

    public var body = EmptyView()

    /// Wraps 8 child views in a single container view.
    public init(
        _ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3, _ view4: View4,
        _ view5: View5, _ view6: View6, _ view7: View7
    ) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
        self.view4 = view4
        self.view5 = view5
        self.view6 = view6
        self.view7 = view7
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            view4,
            view5,
            view6,
            view7,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child4.update(
                        with: view4,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view4))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child5.update(
                        with: view5,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view5))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child6.update(
                        with: view6,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view6))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child7.update(
                        with: view7,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view7))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 9 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView9<
    View0: View, View1: View, View2: View, View3: View, View4: View, View5: View, View6: View,
    View7: View, View8: View
>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren9<
        View0, View1, View2, View3, View4, View5, View6, View7, View8
    >

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3
    public var view4: View4
    public var view5: View5
    public var view6: View6
    public var view7: View7
    public var view8: View8

    public var body = EmptyView()

    /// Wraps 9 child views in a single container view.
    public init(
        _ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3, _ view4: View4,
        _ view5: View5, _ view6: View6, _ view7: View7, _ view8: View8
    ) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
        self.view4 = view4
        self.view5 = view5
        self.view6 = view6
        self.view7 = view7
        self.view8 = view8
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            view4,
            view5,
            view6,
            view7,
            view8,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child4.update(
                        with: view4,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view4))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child5.update(
                        with: view5,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view5))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child6.update(
                        with: view6,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view6))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child7.update(
                        with: view7,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view7))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child8.update(
                        with: view8,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view8))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}

/// A view with exactly 10 children. Autogenerated as an alternative to Swift's not yet
/// production ready variadic generics.
///
/// Has the same behaviour as ``Group`` when rendered directly.
public struct TupleView10<
    View0: View, View1: View, View2: View, View3: View, View4: View, View5: View, View6: View,
    View7: View, View8: View, View9: View
>: TypeSafeView, View {
    public typealias Content = EmptyView

    typealias Children = TupleViewChildren10<
        View0, View1, View2, View3, View4, View5, View6, View7, View8, View9
    >

    public var view0: View0
    public var view1: View1
    public var view2: View2
    public var view3: View3
    public var view4: View4
    public var view5: View5
    public var view6: View6
    public var view7: View7
    public var view8: View8
    public var view9: View9

    public var body = EmptyView()

    /// Wraps 10 child views in a single container view.
    public init(
        _ view0: View0, _ view1: View1, _ view2: View2, _ view3: View3, _ view4: View4,
        _ view5: View5, _ view6: View6, _ view7: View7, _ view8: View8, _ view9: View9
    ) {
        self.view0 = view0
        self.view1 = view1
        self.view2 = view2
        self.view3 = view3
        self.view4 = view4
        self.view5 = view5
        self.view6 = view6
        self.view7 = view7
        self.view8 = view8
        self.view9 = view9
    }

    func children<Backend: AppBackend>(
        backend: Backend,
        snapshots: [ViewGraphSnapshotter.NodeSnapshot]?,
        environment: EnvironmentValues
    ) -> Children {
        return Children(
            view0,
            view1,
            view2,
            view3,
            view4,
            view5,
            view6,
            view7,
            view8,
            view9,
            backend: backend,
            snapshots: snapshots,
            environment: environment
        )
    }

    func layoutableChildren<Backend: AppBackend>(
        backend: Backend,
        children: Children
    ) -> [LayoutSystem.LayoutableChild] {
        var layoutableChildren: [LayoutSystem.LayoutableChild] = []
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child0.update(
                        with: view0,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view0))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child1.update(
                        with: view1,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view1))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child2.update(
                        with: view2,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view2))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child3.update(
                        with: view3,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view3))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child4.update(
                        with: view4,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view4))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child5.update(
                        with: view5,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view5))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child6.update(
                        with: view6,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view6))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child7.update(
                        with: view7,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view7))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child8.update(
                        with: view8,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view8))"
            )
        )
        layoutableChildren.append(
            LayoutSystem.LayoutableChild(
                update: { proposedSize, environment, dryRun in
                    children.child9.update(
                        with: view9,
                        proposedSize: proposedSize,
                        environment: environment,
                        dryRun: dryRun
                    )
                },
                tag: "\(type(of: view9))"
            )
        )
        return layoutableChildren
    }

    func asWidget<Backend: AppBackend>(
        _ children: Children,
        backend: Backend
    ) -> Backend.Widget {
        let group = Group(content: self)
        return group.asWidget(children, backend: backend)
    }

    func update<Backend: AppBackend>(
        _ widget: Backend.Widget,
        children: Children,
        proposedSize: SIMD2<Int>,
        environment: EnvironmentValues,
        backend: Backend,
        dryRun: Bool
    ) -> ViewUpdateResult {
        let group = Group(content: self)
        return group.update(
            widget,
            children: children,
            proposedSize: proposedSize,
            environment: environment,
            backend: backend,
            dryRun: dryRun
        )
    }
}
